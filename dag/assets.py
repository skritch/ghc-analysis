
from zipfile import ZipFile
from typing import NamedTuple
from dagster import asset, AssetKey
from dagster_dbt import load_assets_from_dbt_project
import requests

from dag.util import create_shell_command_asset

from .config import DBT_PROFILES, DBT_PROJECT_PATH, DATA_PATH, SCRIPTS_DIR



dbt_assets = load_assets_from_dbt_project(
    project_dir=DBT_PROJECT_PATH, profiles_dir=DBT_PROFILES,
    node_info_to_asset_key=lambda node_info: AssetKey([node_info["name"]]),
    # io_manager_key=
)



@asset(non_argument_deps={AssetKey(['zip_codes'])}, group_name='geo')
def zip_code_distances() -> None:
    """
    Generated by `load_zip_code_travel_times.py` script.
    """
    raise NotImplementedError

@asset(group_name='nypd')
def nypd_arrests() -> None:
    """
    From Opendata, but very large files--better to manually download. Then, load with `load_arrests_data.py` script.
    """
    raise NotImplementedError

@asset(group_name='nypd')
def nypd_precinct_addresses() -> None:
    """
    Locations come from https://www.nyc.gov/site/nypd/bureaus/patrol/precincts-landing.page
    """
    raise NotImplementedError

@asset(non_argument_deps={"nypd_precinct_addresses"}, group_name='nypd')
def nypd_precinct_locations() -> None:
    """
      Geocoded with Here API via `geocode_csv.py` script, then hand-editing 3 lat/lons that appear 
      way out in Long Island.

      (https://docs.google.com/spreadsheets/d/13SjM52D9yIXMEczNLoHEYrfPc0qrf8cOuunrd9Ye4QI/edit#gid=0)
    """
    raise NotImplementedError

    

OPENDATA_URL = 'https://data.cityofnewyork.us'
OPENDATA_UI_URL = f'{OPENDATA_URL}/d/{{id}}'
OPENDATA_SPATIAL_URL = f'{OPENDATA_URL}/api/geospatial/{{id}}?method=export&format=Shapefile'
OPENDATA_CSV_URL = f'{OPENDATA_URL}/api/views/{{id}}/rows.csv?accessType=DOWNLOAD'
NYC_GOV_API_URL = 'https://s-media.nyc.gov/agencies/dcp/assets/files/zip/data-tools/bytes/{id}.zip'

class Dataset(NamedTuple):
    name: str
    url: str
    relative_path: str | None = None

SPATIAL_DATASETS = [
    Dataset('nyc_congressional_district_geometries', OPENDATA_SPATIAL_URL.format(id='62dw-nwnq')),
    Dataset('nyc_senate_district_geometries', OPENDATA_SPATIAL_URL.format(id='h4i2-acfi')),
    Dataset('nyc_assembly_district_geometries', OPENDATA_SPATIAL_URL.format(id='qh62-9utz')),
    Dataset('nyc_city_council_district_geometries', OPENDATA_SPATIAL_URL.format(id='jgqm-ccbd')),
    Dataset('nyc_community_district_geometries', OPENDATA_SPATIAL_URL.format(id= 'mzpm-a6vd')),
    Dataset('zip_code_geometries', f'{OPENDATA_URL}/download/i8iw-xf4u/application%2Fzip'),
    Dataset('uhf_geometries', 'https://www.nyc.gov/assets/doh/downloads/zip/uhf42_dohmh_2009.zip', relative_path='UHF_42_DOHMH_2009'),
    Dataset('nypd_precinct_geometries', OPENDATA_SPATIAL_URL.format(id='78dh-3ptz')),
    Dataset('census_tract_geometries', NYC_GOV_API_URL.format(id='nyct2020_22c'), relative_path='nyct2020_22c'),
    Dataset('census_block_geometries', NYC_GOV_API_URL.format(id='nycb2020_22c'), relative_path='nycb2020_22c')
]


def build_spatial_assets(d: Dataset):
    zip_path = DATA_PATH / (d.name + '.zip')
    data_path = DATA_PATH / d.name
    shapefile_dir = DATA_PATH / d.name / d.relative_path if d.relative_path else data_path
    group = 'geo'

    z_name = d.name + '_zip'
    @asset(name=z_name, group_name=group, metadata={'source': d.url})
    def download_file() -> None:
        r = requests.get(url=d.url)
        with open(zip_path, 'wb') as f:
            f.write(r.content)

    sh_name = d.name + '_shapefile'
    @asset(name=sh_name, group_name=group, non_argument_deps={z_name})
    def extract_file() -> None:
        with ZipFile(zip_path) as z:
            z.extractall(data_path)

    load_spatial_data = create_shell_command_asset(
         f"{SCRIPTS_DIR}/load_geo_data.sh {shapefile_dir} {d.name}",
         name=d.name, group_name=group, non_argument_deps={sh_name}
    )
    return [download_file, extract_file, load_spatial_data]

opendata_shapefiles = [
    a for d in SPATIAL_DATASETS for a in build_spatial_assets(d)
]


CSV_DATASETS = {
    'nyc_congressional_district_demographics': OPENDATA_CSV_URL.format(id='77d2-9ebr'),
    'nyc_senate_district_demographics': OPENDATA_CSV_URL.format(id='uv67-wxba'),
    'nyc_community_district_demographics': OPENDATA_CSV_URL.format(id='w3c6-35wg'),
    'nyc_city_council_members': OPENDATA_CSV_URL.format(id='uvw5-9znb')
}


# @op
# def load_csv(context: OpExecutionContext, path: Path):
#     # use a copy
#     # or agate? some kind of easy inference
#     raise NotImplementedError
